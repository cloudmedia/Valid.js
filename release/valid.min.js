const onlyNumbers=/^\d+$/;const onlyLetters=/^[a-zA-Z]+$/;const hasNumber=/\d/;const hasLetter=/[A-z]/;const hasUC=/[A-Z]/;const hasLC=/[a-z]/;const hasSym=/[^a-zA-Z0-9_]/;const rfc1123=/^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$/;const reEmail=/^([a-z\d!#$%&'*+\-\/=?^_`{|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+(\.[a-z\d!#$%&'*+\-\/=?^_`{|}~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+)*|"((([ \t]*\r\n)?[ \t]+)?([\x01-\x08\x0b\x0c\x0e-\x1f\x7f\x21\x23-\x5b\x5d-\x7e\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|\\[\x01-\x09\x0b\x0c\x0d-\x7f\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))*(([ \t]*\r\n)?[ \t]+)?")@(([a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|[a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF][a-z\d\-._~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]*[a-z\d\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])\.)+([a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|[a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF][a-z\d\-._~\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]*[a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])\.?$/i;const reIPv4=/^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;const msgBadHostname=" is not a valid hostname.";const msgBadIPv4=" is not a valid IPv4 address.";const msgBadEmail=" is not a valid email address.";const msgOnlyNumbers=" may only contain integer numbers.";class Valid
{constructor(val,valLabel="Value")
{this.val=val;this.valLabel=valLabel;this.message="";this.status=!1;this.passReq=64;this.passLen=8}
setStatus(s)
{this.status=s;return s}
checkRE(regex)
{if(regex.exec(this.val))
{return this.setStatus(!0)}else{return this.setStatus(!1)}}
re(ex)
{var regex=new RegExp(ex);return this.checkRE(regex)}
setPassReq(n)
{if(typeof n==='number')
{if(n&&(n&(n-1))===0)
{this.passReq=n;return!0}else{this.message="Invalid password requirement value!";return!1}}}
setPassLen(l)
{this.passLen=l;return!0}
setVal(val)
{this.val=val;return!0}
setValLabel(label)
{this.valLabel=label;return!0}
isHostname(segs=0)
{if(segs>0)
{var host=this.val.split(".");if(host.length!=segs)return this.setStatus(!1)}
var regex=new RegExp(rfc1123);if(this.checkRE(regex))
{return!0}else{this.message=this.valLabel+msgBadHostname}}
isEmail()
{var regex=new RegExp(reEmail);if(this.checkRE(regex))
{return!0}else{this.message=this.valLabel+msgBadEmail}}
isIPv4()
{var regex=new RegExp(reIPv4);if(this.checkRE(regex))
{return!0}else{this.message=this.valLabel+msgBadIPv4}}
valPass()
{var missing="";var pOK=!0;if(this.val.length<this.passLen)
{this.message=this.valLabel+" must be at least "+this.passLen+" characters.";return this.setStatus(!1)}
switch(!0)
{case(this.passReq==4):if(this.re(onlyNumbers))
{return this.setStatus(!0)}else{this.message=this.valLabel+" may only contain numbers.";return this.setStatus(!1)}
break;case(this.passReq==8):if(this.re(onlyLetters))
{return this.setStatus(!0)}else{this.message=this.valLabel+" may only contain letters.";return this.setStatus(!1)}
break;case(this.passReq>=16):if(!this.re(hasLetter))
{missing+=", at least one letter";pOK=!1}
if(!this.re(hasNumber))
{missing+=", at least one number";pOK=!1}
if(this.passReq==16)break;case(this.passReq>=32):if(!this.re(hasLC))
{missing+=", at least one lowercase letter";pOK=!1}
if(!this.re(hasUC))
{missing+=", at least one uppercase letter";pOK=!1}
if(this.passReq==32)break;case(this.passReq==64):if(!this.re(hasSym))
{missing+=", at least one symbol";pOK=!1}
break;default:this.message="Invalid password requirement value!";return this.setStatus(!1)}
if(pOK)
{return this.setStatus(!0)}else{this.message=this.valLabel+" must contain: "+missing.substr(2);return this.setStatus(!1)}}
isLength(len1,len2)
{if(len2==undefined)len2=0;if(this.val.length<len1)
{this.message=this.valLabel+" must be at least "+len1+" characters.";return this.setStatus(!1)}
if(len2&&this.val.length>len2)
{this.message=this.valLabel+" must be fewer than "+len2+" characters.";return this.setStatus(!1)}
return this.setStatus(!0)}
isInt()
{if(!this.re(onlyNumbers))
{this.message=this.valLabel+msgOnlyNumbers;return this.setStatus(!1)}else{return this.setStatus(!0)}}
isRange(r1,r2)
{if(!this.isInt())return!1;r1=parseInt(r1);r2=parseInt(r2);if(this.val<r1)
{this.message=this.valLabel+" must be greater than "+r1+".";return this.setStatus(!1)}
if(this.val>r2)
{this.message=this.valLabel+" must be less than "+r2+".";return this.setStatus(!1)}
return this.setStatus(!0)}}
